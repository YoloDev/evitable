parameters:
  os: 'linux'
  toolchain: 'stable'

jobs:
- job: build_${{ parameters.os }}_${{ parameters.toolchain }}
  displayName: Build ${{ parameters.os }} ${{ parameters.toolchain }}

  pool:
    ${{ if eq(parameters.os, 'linux') }}:
      vmImage: 'ubuntu-16.04'
    ${{ if eq(parameters.os, 'osx') }}:
      vmImage: 'macos-10.13'
    ${{ if eq(parameters.os, 'windows' )}}:
      vmImage: 'windows-2019'

  steps:
  - ${{ if eq(parameters.os, 'windows' )}}:
    - script: |
        echo "Setting up rust for Windows"
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain ${{ parameters.toolchain }}
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      displayName: Setup rust

  - ${{ if ne(parameters.os, 'windows' )}}:
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${{ parameters.toolchain }}
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Setup rust

  - script: cargo install cargo2junit
    displayName: Install cargo2junit

  - script: cargo build --all
    displayName: Cargo build

  - bash: |
      cargo test --all-features -- -Z unstable-options --format json | tee test_results.json || true
      cat test_results.json | cargo2junit > test_results.xml
    displayName: Run tests

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'test_results.xml'
      testRunTitle: ${{ parameters.os }}-${{ parameters.toolchain }}
